class LCA {
private:
    int                    n;
    vector<array<int, 20>> anc;
    vector<int>            depth;
    vector<vector<int>>    graph;

    void dfs(int root)
    {
        for (int adj : graph[root]) {
            if (anc[root][0] == adj) continue;
            depth[adj]  = depth[root] + 1;
            anc[adj][0] = root;
            dfs(adj);
        }
    }

    void initLCA()
    {
        for (int j = 1; j <= 18; j++) {
            for (int i = 1; i <= n; i++) {
                anc[i][j] = anc[anc[i][j - 1]][j - 1];
            }
        }
    }

public:
    LCA(vector<vector<int>> graph, int s) : n(graph.size() - 1), anc(graph.size()), depth(graph.size()), graph(graph)
    {
        for (auto& i : anc) {
            i[0] = 0;
        }
        anc[s][0] = s;
        depth[s]  = 0;
        dfs(s);
        initLCA();
    }

    int lca(int u, int v)
    {
        if (depth[u] < depth[v]) swap(u, v);
        for (int i = 18; i >= 0; i--) {
            if (depth[anc[u][i]] >= depth[v]) u = anc[u][i];
        }
        if (u == v) {
            return u;
        }
        for (int i = 18; i >= 0; i--) {
            if (anc[u][i] != anc[v][i]) {
                u = anc[u][i], v = anc[v][i];
            }
        }
        return anc[u][0];
    }
};